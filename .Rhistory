names(iris)
sapply(iris, class)
head(iris)
#iris_order <- select(iris, Species, Petal.Width, everything())
head(iris)
attach(iris)
install.packages("cluster")
install.packages("cluster")
library(cluster)
fviz_cluster(k3fit, iris)
library(cluster)
library(fpc)
fviz_cluster(k3fit, iris)
install.packages("ggplot2")
library(ggplot2)
fviz_cluster(k3fit, iris)
library(gridExtra)
grid.arrange(k3fit, k4fit, k5fit, k10fit, nrow = 2)
grid.arrange(k3fit, k4fit, k5fit, k10fit)
grid.arrange(k3fit, k4fit, k5fit, k10fit, nrow=4)
k.values <- 1:15
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(df, k, nstart = 10 )$tot.withinss
}
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
# extract wss for 2-15 clusters
install.packages("purrr")
install.packages("purrr")
library(purrr)
wss_values <- map_dbl(k.values, wss)   #returns double vectors
wss_values <- map(k.values, wss)   #returns double vectors
library(purrr)
# extract wss for 2-15 clusters
install.packages("purrr")
library(purrr)
wss_values <- map(k.values, wss)   #returns double vectors
wss_values <- map_dbl(k.values, wss)   #returns double vectors
wss_values <- map_dbl(k.values, wss)   #returns double vectors
wss <- function(k) {
kmeans(iris, k, nstart = 10 )$tot.withinss
}
k.values <- 1:15
wss_values <- map_dbl(k.values, wss)   #returns double vectors
wss_values <- map_int(k.values, wss)   #returns double vectors
wss_values <- map_int(k.values, wss)   #returns double vectors
wss_values <- map_dbl(k.values, wss)   #returns double vectors
# function to compute total within-cluster sum of square
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(iris, k, nstart=50,iter.max = 15 )$tot.withinss})
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(iris, k, nstart=50,iter.max = 15 )$tot.withinss})
set.seed(123)
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(iris, k, nstart=50,iter.max = 15 )$tot.withinss})
iris <- scaled(iris)
iris <- scale(iris)
iris <- scale(iris[1:4])
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(iris, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
library(ggplot2)
library(dplyr)
library(sqldf)
library(datasets)
library(MASS)
library(psych)
library(car)
library(ggplot2)
data(iris)
dim(iris)
names(iris)
sapply(iris, class)
head(iris)
head(iris)
apply(iris, 2, function(x) any(is.na(x)))    #no missing values
attach(iris)
dim(iris)
names(iris)
sapply(iris, class)
head(iris)
#iris_order <- select(iris, Species, Petal.Width, everything())
head(iris)
apply(iris, 2, function(x) any(is.na(x)))
summary(iris)
apply(iris[1:4], 2, sd)
sqldf('select DISTINCT Species from iris GROUP BY Species')            #to see how many species are there
aggregate(.~Species, iris, mean)
aggregate(.~Species, iris, sd)
quantile(Sepal.Length)
quantile(Sepal.Width)
quantile(Petal.Length)
quantile(Petal.Width)
summary(iris)
apply(iris[1:4], 2, sd)
sqldf('select DISTINCT Species from iris GROUP BY Species')            #to see how many species are there
aggregate(.~Species, iris, mean)
aggregate(.~Species, iris, sd)
quantile(Sepal.Length)
quantile(Sepal.Width)
quantile(Petal.Length)
quantile(Petal.Width)
data(iris)
dim(iris)
names(iris)
sapply(iris, class)
head(iris)
#iris_order <- select(iris, Species, Petal.Width, everything())
apply(iris, 2, function(x) any(is.na(x)))
sqldf('select DISTINCT Species from iris GROUP BY Species')            #to see how many species are there
#no missing values
attach(iris)
data(iris)
dim(iris)
names(iris)
sapply(iris, class)
head(iris)
#iris_order <- select(iris, Species, Petal.Width, everything())
apply(iris, 2, function(x) any(is.na(x)))
sqldf('select DISTINCT Species from iris GROUP BY Species')            #to see how many species are there
#no missing values
attach(iris)
summary(iris)
apply(iris[1:4], 2, sd)
aggregate(.~Species, iris, mean)
aggregate(.~Species, iris, sd)
quantile(Sepal.Length)
quantile(Sepal.Width)
quantile(Petal.Length)
quantile(Petal.Width)
library(cowplot)
par(mfrow=c(2,2))
d1 <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
d2 <- ggplot(iris, aes(x = Sepal.Width,  fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
d3 <- ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
d4 <- ggplot(iris, aes(x = Petal.Width, fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
#install.packages("cowplot")
library(cowplot)
plot_grid(d1, d2, d3, d4 , ncol=2, nrow=2)
par(mfrow=c(2,2))
d1 <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
d2 <- ggplot(iris, aes(x = Sepal.Width,  fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
d3 <- ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
d4 <- ggplot(iris, aes(x = Petal.Width, fill = Species)) +
geom_density(alpha=0.7)+ theme_bw()
#install.packages("cowplot")
library(cowplot)
plot_grid(d1, d2, d3, d4 , ncol=2, nrow=2)
pairs.panels(iris)                  #psych
par(mfrow=c(2,2))
hist(iris$Sepal.Length, col = "pink")
hist(iris$Sepal.Width, col = "pink")
hist(iris$Petal.Length, col = "pink")
hist(iris$Petal.Width, col = "pink")
help(iris)
# K means Clustering ------------------------------------------------------
plot(Petal.Length~Sepal.Length)
plot(Petal.Length~Sepal.Length)
plot(Petal.Width~Sepal.Length)
plot(Petal.Length~Sepal.Length)
plot(Petal.Width~Sepal.Length)
par(mfrow(1,2))
plot(Petal.Length~Sepal.Length)
plot(Petal.Width~Sepal.Length)
# K means Clustering ------------------------------------------------------
par(mfrow=c(1,2))
plot(Petal.Length~Sepal.Length)
plot(Petal.Width~Sepal.Length)
library(cluster)
library(fpc)
k3fit <- kmeans(iris[1:4], 3)
plotcluster(iris[1:4], k3fit$cluster)
k3fit$size
k4fit <- kmeans(iris[1:4], 4)
plotcluster(iris[1:4], k4fit$cluster)
k4fit$size
k5fit <- kmeans(iris[1:4],5)
plotcluster(iris[1:4], k5fit$cluster)
k5fit$size
k10fit <- kmeans(iris[1:4],10)
plotcluster(iris[1:4], k10fit$cluster)
k10fit$size
par(mfrow=c(2,2))
k3fit <- kmeans(iris[1:4], 3)
plotcluster(iris[1:4], k3fit$cluster)
k3fit$size
k4fit <- kmeans(iris[1:4], 4)
plotcluster(iris[1:4], k4fit$cluster)
k4fit$size
k5fit <- kmeans(iris[1:4],5)
plotcluster(iris[1:4], k5fit$cluster)
k5fit$size
k10fit <- kmeans(iris[1:4],10)
plotcluster(iris[1:4], k10fit$cluster)
k10fit$size
set.seed(123)
iris <- scale(iris[1:4])
k.max <- 15
wss <- sapply(1:k.max,
function(k)
{kmeans(iris, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
sample = sample.split(iris[1:4], SplitRatio = .80)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
# KNN ---------------------------------------------------------------------
install.packages(caTools)
sample = sample_frac(iris[1:4],.80)
library(dplyr)
setwd("~/Flex 3/Data Mining 1/Iris-dataset-EDA-Clustering-Classification")
sample = sample_frac(iris[1:4],.80)
# KNN ---------------------------------------------------------------------
sample = sample_frac(iris,.80)
# KNN ---------------------------------------------------------------------
sample = sample_frac(iris,.80)
iris
data(iris)
head(iris)
# KNN ---------------------------------------------------------------------
sample = sample_frac(iris,.80)
test = -iris[-train]
# KNN ---------------------------------------------------------------------
train = sample_frac(iris,.80)    #dplyr
test = -iris[-train]
# KNN ---------------------------------------------------------------------
train_raw = sample_frac(iris,.80)    #dplyr
train<-as.numeric(rownames(train_raw))
test = -iris[-train]
knn <- knn(train, test)
# KNN ---------------------------------------------------------------------
install.packages("class")
library(class)
knn <- knn(train, test)
knn <- knn(train, test, trainig , k=3)
knn <- knn(train, test, "trainig" , k=3)
train
test
nrow(train_raw)
120/50
120/150
test = iris[-train]
test
train
knn <- knn(train, test, "trainig" , k=3)
knn <- knn(train, test)
knn <- knn(train, test, "trainig" , k=3)
test = iris[-train,]
test
test <- test_raw[1:4]
test_raw = iris[-train,]
test <- test_raw[1:4]
test
knn <- knn(train, test, "trainig" , k=3)
train_raw
train<-as.numeric(rownames(train_raw))
train <- train_raw[1:4]
train
test_raw = iris[-train,]
test_raw
library(class)
train_raw = sample_frac(iris,.80)    #dplyr
train <- train_raw[1:4]
test_raw = iris[-train,]
test <- test_raw[1:4]
test_raw = iris[-train,]
test <- test_raw[1:4]
test
train
nrow(train)
nrow(test)
knn <- knn(train, test, "trainig" , k=3)
knn <- knn(train, test, train, k=3)
set.seed(12825704)
library(class)
set.seed(12825704)
train_raw = sample_frac(iris,.80)    #dplyr
train <- train_raw[1:4]
test_raw = iris[-train,]
test <- test_raw[1:4]
nrow(train)
nrow(test)
knn <- knn(train, test, train, k=3)
knn <- knn(train, test, train[5], k=3)
train[5]
knn <- knn(train, test, train[5,], k=3)
knn <- knn(train, test, train[,5], k=3)
knn <- knn(train, test, iris[5], k=3)
knn <- knn(train, test, iris[5], k=3)
knn <- knn(train, test, train_raw[5], k=3)
train_raw
train_raw[5]
knn <- knn(train[1:4], test[1:4], train[5], k=3)
library(class)
set.seed(12825704)
train_raw = sample_frac(iris,.80)    #dplyr
test_raw = iris[-train,]
nrow(train)
nrow(test)
knn <- knn(train[1:4], test[1:4], train[5], k=3)
library(class)
set.seed(12825704)
train = sample_frac(iris,.80)    #dplyr
test = iris[-train,]
nrow(train)
nrow(test)
knn <- knn(train[1:4], test[1:4], train[5], k=3)
train[1:4]
train[5]
nrow(train[5])
nrow(train[1:4])
knn <- knn(train[1:4], test[1:4], train[5], k=3)
knn <- knn(train[1:4], test[1:4], train[,5], k=3)
knn
train[,5]
knn <- knn(train[1:4], test[1:4], train_label, k=3)
train_label <- train[,5]
knn <- knn(train[1:4], test[1:4], train_label, k=3)
knn <- knn(train[1:4], test[1:4], train_label, k=4)
knn <- knn(train[1:4], test[1:4], train_label, k=5)
knn <- knn(train[1:4], test[1:4], train_label, k=10)
knn
knn4 <- knn(train[1:4], test[1:4], train_label, k=4)
knn5 <- knn(train[1:4], test[1:4], train_label, k=5)
knn10 <- knn(train[1:4], test[1:4], train_label, k=10
knn10
nrow(train[1:4])
knn4 <- knn(train[1:4], test[1:4], train_label, k=4)
knn5 <- knn(train[1:4], test[1:4], train_label, k=5)
knn10 <- knn(train[1:4], test[1:4], train_label, k=10)
knn10
for(i in 1:20)
{
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
}
knn_fit
for(i in 1:20)
{
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
knn_fit
}
knn_fit
table(knn_fit)
table(factor(knn_fit)
table(factor(knn_fit))
table(knn_fit)
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
knn_fit
table(knn_fit)
table(test, knn_fit)
knn_fit
table(test, knn_fit)
test, knn_fit
test
knn_fit
table(test[,5], knn_fit)
library(class)
set.seed(12825704)
train = sample_frac(iris,.80)    #dplyr
test = iris[-train,]
train_label <- train[,5]
nrow(train)
nrow(test)
knn3 <- knn(train[1:4], test[1:4], train_label, k=3)
nrow(train[5])
nrow(train[1:4])
table(test[5], knn_fit)
names(test)
test
train
test = iris[-train,]
test = iris[-train,]
train = sample_frac(iris,.80)    #dplyr
test = iris[-train,]
test = iris[-train]
test
train = sample_frac(iris,.80)    #dplyr
train
test = iris[-train]
iris[-train]
test = iris[,-train]
for(i in 1:10)
{
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
knn_fit
}
for(i in 1:10)
{
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
print(knn_fit)
}
error_rate <- get_knn_error_rates(train[1:4], test[1:4], k=i)
library(tidyverse)
library(stringr)
error_rate <- get_knn_error_rates(train[1:4], test[1:4], k=i)
for(i in 1:10)
{
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
error_rate <- get_knn_error_rates(train[1:4], test[1:4], k=i)
}
library(tidyverse)
library(stringr)
for(i in 1:10)
{
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
error_rate <- get_knn_error_rates(train[1:4], test[1:4], k=i)
}
table(test[5], knn_fit)
table(test[,5], knn_fit)
train
test
train_label
test = iris[-train]
test = iris[,-train]
test = iris[-train]
iris_sample <- sample(x = nrow(iris), size = nrow(iris)*0.80)
iris_train <- iris[iris_sample,]
iris_test <- iris[-iris_sample,]
iris_train
iris_test
iris_sample
train = sample_frac(iris,0.80)    #dplyr
test = iris[-train,]
test = iris[-train,]
train <- iris[sample,]
train <- iris[sample,]
test = iris[-train,]
sample = sample_frac(iris,0.80)    #dplyr
train <- iris[sample,]
train
train <- iris[sample,]
train
test = iris[-train,]
test
set.seed(12825704)
train = sample_frac(iris,0.80)    #dplyr
train <- iris[sample,]
test = iris[-train,]
train_label <- train[,5]
nrow(train)
nrow(test)
knn3 <- knn(train[1:4], test[1:4], train_label, k=3)
nrow(train[5])
nrow(train[1:4])
for(i in 1:10)
{
knn_fit <- knn(train[1:4], test[1:4], train_label, k=i)
# error_rate <- get_knn_error_rates(train[1:4], test[1:4], k=i)
}
table(test[,5], knn_fit)
names(test)
table(train[,5], knn_fit)
knn_fit
test = iris[-train]
test
train <- iris[sample,]
train = sample_frac(iris,0.80)    #dplyr
test = iris[-train,]
train = sample(iris,0.80)    #dplyr
test = iris[-train,]
train
train = sample(nrow(iris),0.80*nrow(iris))    #dplyr
train
test
train_label
nrow(train)
nrow(test)
train = sample(nrow(iris),0.80*nrow(iris))    #dplyr
train
knn3 <- knn(train[1:4], test[1:4], train_label, k=3)
#knn3 <- knn(train[1:4], test[1:4], train_label, k=3)
knn3 <- knn(train, test[1:4], train_label, k=3)
train = sample_frac(iris,0.80)    #dplyr
train = sample_frac(iris,0.80)    #dplyr
test = iris[-train,]
train_label <- train[,5]
nrow(train)
nrow(test)
knn3 <- knn(train[1:4], test[1:4], train_label, k=3)
knn3 <- knn(train, test[1:4], train_label, k=3)
nrow(train[5])
nrow(train[1:4])
ncol(test)
ncol(train)
nrow(train)
nrow(test)
test = iris[-train,]
test = as.numeric(iris[-train,])
test = as.numeric(iris[-train,])
table(train[,5], knn_fit)
